<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
                   "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<!-- lifted from troff+man by doclifter -->
<refentry>
<refentryinfo><date>14 Aug 2004</date></refentryinfo>
<refmeta>
<refentrytitle>3</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo class='source'>Linux</refmiscinfo>
</refmeta>
<refnamediv id='name'>
<refname>libgps</refname>
<refpurpose>C service library for communicating with the GPS daemon</refpurpose>
</refnamediv>
<refsynopsisdiv id='synopsis'>
<funcsynopsis>
<funcsynopsisinfo>

C:

#include &lt;gps.h&gt;

</funcsynopsisinfo>
<funcprototype>
<funcdef>struct gps_data_t *<function>gps_open</function></funcdef>
    <paramdef>int<parameter>af</parameter></paramdef>
    <paramdef>char *<parameter>server</parameter></paramdef>
    <paramdef>char * <parameter>port</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>gps_open_r</function></funcdef>
    <paramdef>char *<parameter>server</parameter></paramdef>
    <paramdef>char * <parameter>port</parameter></paramdef>
    <paramdef>struct gps_data_t *<parameter>gpsdata</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>gps_send</function></funcdef>
    <paramdef>struct gps_data_t *<parameter>gpsdata</parameter></paramdef>
    <paramdef>char *<parameter>fmt</parameter>...</paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>gps_set_raw_hook</function></funcdef>
    <paramdef>struct gps_data_t *<parameter>gpsdata</parameter></paramdef>
    <paramdef>void (*<parameter>hook</parameter>)(struct gps_data_t *,
    char *buf, size_t len)</paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>gps_poll</function></funcdef>
    <paramdef>struct gps_data_t *<parameter>gpsdata</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>bool <function>gps_waiting</function></funcdef>
    <paramdef>struct gps_data_t *<parameter>gpsdata</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>void <function>gps_close</function></funcdef>
    <paramdef>struct gps_data_t *<parameter>gpsdata</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>int <function>gps_stream</function></funcdef>
    <paramdef>struct gps_data_t *<parameter>gpsdata</parameter></paramdef>
    <paramdef>unsigned int<parameter>flags</parameter></paramdef>
    <paramdef>void *<parameter>data</parameter></paramdef>
</funcprototype>
<funcprototype>
<funcdef>char *<function>gps_errstr</function></funcdef>
    <paramdef>int <parameter>err</parameter></paramdef>
</funcprototype>
<funcsynopsisinfo>

Python:

import gps

session = gps.gps(host="localhost", port="2947")

session.set_raw_hook(raw_hook)

session.stream(flags=WATCH_JSON)

for report in session:
    process(report)

del session

</funcsynopsisinfo>
</funcsynopsis>
</refsynopsisdiv>

<refsect1 id='description'><title>DESCRIPTION</title>

<para><emphasis remap='B'>libgps</emphasis> is a service library which
supports querying GPS devices; link it with the linker option
-lgps. There are two interfaces supported in it; one high-level
interface that goes through
<citerefentry><refentrytitle>gpsd</refentrytitle><manvolnum>1</manvolnum></citerefentry>
and is intended for concurrent use by several applications, and one
low-level interface that speaks directly with the serial or USB device
to which the GPS is attached. This page describes the high-level
interface that is safe for multiple applications to use simultaneously; it
is probably the one you want.  The low-level interface is documented
at
<citerefentry><refentrytitle>libgpsd</refentrytitle><manvolnum>3</manvolnum></citerefentry>.</para>

<warning><para>Take care to conditionalize your code on the major and
minor API version symbols in <filename>gps.h</filename>; ideally,
force a compilation failure if GPSD_API_MAJOR_VERSION is not a version
you recognize.  See the GPSD project website for more information on
the protocol and API changes.</para></warning>

<para>Calling <function>gps_open()</function> initializes a GPS-data
structure to hold the data collected by the GPS, and returns a socket
attached to
<citerefentry><refentrytitle>gpsd</refentrytitle><manvolnum>1</manvolnum></citerefentry>. 
<function>gps_open()</function> returns NULL on errors.  errno is
set depending on the error returned from the the socket layer; see
<filename>gps.h</filename> for values and explanations. The host
address may be a DNS name, an IPv4 dotted quad, or an IPV6 address;
the library will do the roight thing for any of these.</para>

<para><function>gps_open_r()</function> is a reentrent-friendly
version that puts the session storage where you wish to allocate it.
It returns 0 on success and -1 on failure, with errno set
appropriately.</para>

<para><function>gps_close()</function> ends the session.</para>

<para><function>gps_send()</function> writes a command to the daemon.
The second argument must be a format string containing elements from
the command set documented at
<citerefentry><refentrytitle>gpsd</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
It may have % elements as for
<citerefentry><refentrytitle>sprintf</refentrytitle><manvolnum>3</manvolnum></citerefentry>,
which will be filled in from any following arguments.  This function
returns a -1 if there was a Unix-level write error, otherwise
0. Please read the LIMITATIONS section for additional information and
cautions.</para>

<para><function>gps_poll()</function> accepts a response, or sequence
of responses, from the daemon and interprets it as though it were a
query response (the return value is as for a query).
<function>gps_poll()</function> returns the validity mask of the
received structure.  This function does a blocking read waiting for
data from the daemon; it returns 0 for success, or -1 on a Unix-level
read error. </para>

<para><function>gps_waiting()</function> can be used to check
whether there is data from the daemon. It returns true if there is,
false on no data waiting or error condition. It does not block
waiting for input.</para>

<para><function>gps_stream()</function> asks
<application>gpsd</application> to stream the reports it has at you,
to be made available whenn you poll.  It is preferable to the
older-style (pre-2.90) way of doing this,
<function>gps_query()</function> with a "w+" argument, because it
insulates your code from whether your client library and your
<application>gpsd</application> are using old or new protocol.
The second argument is a flag mask that sets various policy bits; 
see trhe list below.  Calling <function>gps_stream()</function>
more than once with different flag masks is allowed.</para>

<variablelist>
<varlistentry>
<term>WATCH_DISABLE</term>
<listitem>
<para>Disable the reporting modes specified by the other WATCH_ flags.
Cannot be used to disable POLL_NONBLOCK.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_ENABLE</term>
<listitem>
<para>Disable the reporting modes specified by the other WATCH_ flags.
This is the default.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_JSON</term>
<listitem>
<para>Enable JSON reporting of data. If WATCH_ENABLE is set, and nmo
other WATCH flags are set, this ids the default.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_NMEA</term>
<listitem>
<para>Enable generated pseudo-NMEA reporting on binary devices.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_RARE</term>
<listitem>
<para>Enable reporting of binary packets in encoded hex.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_RAW</term>
<listitem>
<para>Enable literal passtrough of binary packets.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_SCALED</term>
<listitem>
<para>When reporting AIS data, scale integer quantities to floats if 
they have a divisor or rendering formula assosiated with them.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_NEWSTYLE</term>
<listitem>
<para>Force issuing a JSON initialization and getting new-style 
responses. This will become the default in a future release. </para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_OLDSTYLE</term>
<listitem>
<para>Force issuing a W or R command and getting old-style
responses. This is now the default behavior, but will be removed
in a future release.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>WATCH_DEVICE</term>
<listitem>
<para>Restrict watching to a speciied device, patch given as second 
argument.</para>
</listitem>
</varlistentry>
<varlistentry>
<term>POLL_NONBLOCK</term>
<listitem>
<para>Normally <function>gps_poll()</function> blocks until
either there is a read error or some data is received from tha 
daemon.  In this mode, <function>gps_poll()</function> returns
immediately with a value of 0 if there is no input waiting.</para>
</listitem>
</varlistentry>
</variablelist>

<para><function>gps_set_raw_hook()</function> takes a function you
specify and run it (synchronously) on the raw data pulled by a
<function>gps_query()</function> or <function>gps_poll()</function>
call.  The arguments passed to this hook will be a pointer to a
structure containing parsed data, and a buffer containining the
raw <application>gpsd</application> response.</para>

<para><function>gps_errstr()</function> returns an ASCII string (in
English) describing the error indicated by a nonzero return value from
<function>gps_open()</function>.</para>

<para>Consult <filename>gps.h</filename> to learn more about the data members 
and associated timestamps.  Note that information will accumulate
in the session structure over time, and the 'valid' field is not
automatically zeroed by each poll.  It is up to the client to
zero that field when appropriate and to keep an eye on the fix 
and sentence timestamps.</para>

<para>The Python implementation supports the same facilities as the C
library. <function>gps_open()</function> is replaced by the
initialization of a gps session object; the other calls are methods of
that object, and have the same names as the corresponding C functions.
Resources within the session object will be properly released when it
is garbage-collected. Note one limitation: POLL_NOBLOCK is not yet 
supported in Python; use the waiting() method instead.</para>
</refsect1>

<refsect1 id='example'><title>CODE EXAMPLE</title>

<para>The following is an excerpted and simplified version of the
libgps interface code from
<citerefentry><refentrytitle>xgps</refentrytitle><manvolnum>1</manvolnum></citerefentry>.
The function <function>handle_input()</function> is a trivial piece of
code that calls gps_poll(gpsdata).
</para>

<programlisting>
    gpsdata = gps_open(server, port);

    build_gui(toplevel);

    gps_set_raw_hook(gpsdata, update_panel);
	
    (void)gps_stream(gpsdata, WATCH_ENABLE, NULL);

    (void)XtAppAddInput(app, gpsdata->gps_fd, 
		  (XtPointer)XtInputReadMask, handle_input, NULL);
    (void)XtAppMainLoop(app);

    (void)gps_close(gpsdata);
</programlisting>

</refsect1>

<refsect1 id='limitations'><title>LIMITATIONS</title>

<para>In the C API, incautious use of <function>gps_send()</function>
may lead to subtle bugs. In order to not bloat <structname>struct
gps_data_t</structname> with space used by responses that are not
expected to be shipped in close sequence with each other, the storage
for fields associated with certain responses are combined in a
union.</para>

<para>The risky set of responses includes VERSION, DEVICELIST, RTCM2,
RTCM3, and AIS; it may not be limited to that set.  The logic of the
daemon's watcher mode is careful to avoid dangerous sequences, but
you should read and understand the layout of <structname>struct
gps_data_t</structname> before using <function>gps_send()</function>
to request any of these responses.</para>

</refsect1>

<refsect1 id='compatibility'><title>COMPATIBILITY</title>

<para>The <function>gps_query()</function> supported in major versions
1 and 2 of this library has been removed.  With the new
streaming-oriented wire protocol behind this library, it is extremely
unwise to assume that the first transmission from the damon after a
command is shipped to it will be the reponse to command.</para>

<para>If you must send commands to the daemon explicity, use
<function>gps_send()</function> but beware that this ties your code to
the GPSD wire protocol. It is not recommended.</para>

<para>This API has been stable since GPSD 2.90, except that
<function>gps_waiting()</function> was added in 2.91.</para>
</refsect1>

<refsect1 id='see_also'><title>SEE ALSO</title>
<para>
<citerefentry><refentrytitle>gpsd</refentrytitle><manvolnum>8</manvolnum></citerefentry>,
<citerefentry><refentrytitle>gps</refentrytitle><manvolnum>1</manvolnum></citerefentry>,
<citerefentry><refentrytitle>libgps</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
<citerefentry><refentrytitle>libgpsmm</refentrytitle><manvolnum>3</manvolnum></citerefentry>.
</para>
</refsect1>

<refsect1 id='author'><title>AUTHOR</title>
<para>Eric S. Raymond &lt;esr@thyrsus.com&gt;, Thread-callback methods
in the C binding added by Alfredo Pironti
&lt;alfredo@users.sourceforge.net&gt;.</para>
</refsect1>
</refentry>

